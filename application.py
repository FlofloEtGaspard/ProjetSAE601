"""
Lien vers notre Github : https://github.com/FlofloEtGaspard/ProjetSAE601/tree/main
Florian Bougon et Gaspard Louvel
"""

### 1. Importation des librairies et chargement des donnÃ©es
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px

# Chargement des donnÃ©es
df = pd.read_csv("C:\\Users\\bougo\\Documents\\Eudes\\data\\ds_salaries.csv")

### 2. Exploration visuelle des donnÃ©es
#votre code 
st.title("ðŸ“Š Visualisation des Salaires en Data Science")
st.markdown("Explorez les tendances des salaires Ã  travers diffÃ©rentes visualisations interactives.")


if st.checkbox("Afficher un aperÃ§u des donnÃ©es"):
    st.write(df.head())


#Statistique gÃ©nÃ©rales avec describe pandas 
#votre code 
st.subheader("ðŸ“Œ Statistiques gÃ©nÃ©rales")
st.write(df.describe())


### 3. Distribution des salaires en France par rÃ´le et niveau d'expÃ©rience, uilisant px.box et st.plotly_chart
#votre code 
st.subheader("ðŸ“ˆ Distribution des salaires en France")
fig = px.box(df, x="job_title", y="salary_in_usd", color="experience_level",title="Distribution des salaires en fonction du rÃ´le et du niveau d'expÃ©rience")
st.plotly_chart(fig)

### 4. Analyse des tendances de salaires :
#### Salaire moyen par catÃ©gorie : en choisisant une des : ['experience_level', 'employment_type', 'job_title', 'company_location'], utilisant px.bar et st.selectbox 
category = st.selectbox(
    "Choisissez la catÃ©gorie pour analyser les salaires moyens :",
    ['experience_level', 'employment_type', 'job_title', 'company_location']
)

salary_by_category = df.groupby(category)['salary'].mean().reset_index()

# Affichage du graphique
fig = px.bar(salary_by_category, x=category, y="salary",title="Analyse des tendances de salaire",labels=category,color=category)

st.plotly_chart(fig)

st.markdown("Nous pouvons voir ici les salaires moyens par rapport Ã  diffÃ©rentes catÃ©gories: l'expÃ©rience, le type de job, le type de contrat et le pays. Nous remarquons de grandes diffÃ©rences entre certaines alors que d'autres sont assez similaires.") 

### 5. CorrÃ©lation entre variables
# SÃ©lectionner uniquement les colonnes numÃ©riques pour la corrÃ©lation
#votre code 

colonnes_numeriques = df[["salary", "salary_in_usd", "remote_ratio"]]

# Calcul de la matrice de corrÃ©lation
#votre code
corr_matrix = colonnes_numeriques.corr()

# Affichage du heatmap avec sns.heatmap 
#votre code 
st.subheader("ðŸ”— CorrÃ©lations entre variables numÃ©riques")

plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap="YlGnBu", fmt=".2f", cbar=True)

# Affichage du graphique
st.pyplot(plt)

st.markdown("Nous voyons qu'il n'y a aucune corrÃ©lation entre les variables numÃ©riques.")

### 6. Analyse interactive des variations de salaire
# Une Ã©volution des salaires pour les 10 postes les plus courants
job_counts = df["job_title"].value_counts().reset_index()

# count of job titles pour selectionner les postes
top_10_jobs = job_counts.head(10)
filtered_df = df[df["job_title"].isin(top_10_jobs["job_title"])]

# calcul du salaire moyen par an
salary_by_job = filtered_df.groupby(["job_title", "experience_level"])["salary_in_usd"].mean().reset_index()
experience_order = ["EN", "MI", "EX", "SE"]
salary_by_job["experience_level"] = pd.Categorical(salary_by_job["experience_level"], categories=experience_order, ordered=True)

salary_by_job = salary_by_job.sort_values(by="experience_level")
#utilisez px.line
fig = px.line(salary_by_job, 
              x="experience_level", 
              y="salary_in_usd", 
              color="job_title", 
              markers=True, 
              title="Ã‰volution des salaires pour les 10 postes les plus courants",
              category_orders={"experience_level": experience_order})
#votre code 
st.subheader("ðŸ“Š Ã‰volution des salaires pour les 10 postes les plus courants")
st.plotly_chart(fig)

st.markdown("Nous remarquons que le salaire moyen augmente tout au long de la carriÃ¨re hormis pour certains jobs ou il baisse puis remonte ensuite. Cela peut etre du Ã  un biais venant des autres variables comme par exemple le pays ou encore le ratio de tÃ©lÃ©travail.")


### 7. Salaire mÃ©dian par expÃ©rience et taille d'entreprise
# utilisez median(), px.bar
#votre code 
salaire_median = df.groupby(["experience_level", "company_size"])["salary_in_usd"].median().reset_index()

fig = px.bar(salaire_median, 
             x="experience_level", 
             y="salary_in_usd", 
             color="company_size", 
             barmode="group", 
             title="Salaire mÃ©dian par niveau d'expÃ©rience et taille d'entreprise",
             labels={"salary_in_usd": "Salaire mÃ©dian (USD)", "experience_level": "Niveau d'expÃ©rience"},
             category_orders={"experience_level": ["EN", "MI", "EX", "SE"]})

st.subheader("ðŸ“Š Salaire mÃ©dian par niveau d'expÃ©rience et taille d'entreprise")
st.plotly_chart(fig)

st.markdown("Nous voyons que le salaire mÃ©dian a tendance Ã  Ãªtre plus Ã©levÃ© dans les entreprises de moyenne taille exceptÃ© pour les sÃ©niors ou les grandes compagnies payent mieux.")

### 8. Ajout de filtres dynamiques
#Filtrer les donnÃ©es par salaire utilisant st.slider pour selectionner les plages 
#votre code 

# DÃ©finition des sliders
min_salaire, max_salaire = st.slider(
    "Filtrer les donnÃ©es par salaire", 
    min_value=int(df["salary_in_usd"].min()), 
    max_value=int(df["salary_in_usd"].max()), 
    value=(int(df["salary_in_usd"].min()), int(df["salary_in_usd"].max())),
    step=1000
)

# Filtrage du dataset en fonction des sliders
filtered_df = df[(df["salary_in_usd"] >= min_salaire) & (df["salary_in_usd"] <= max_salaire)]

st.dataframe(filtered_df)

### 9.  Impact du tÃ©lÃ©travail sur le salaire selon le pays

df_teletravail = df[df["remote_ratio"].notna()]
df_teletravail["remote_work"] = df_teletravail["remote_ratio"].map({0: "PrÃ©sentiel", 50: "Hybride", 100: "TÃ©lÃ©travail"})

# Regrouper les salaires moyens par pays et mode de travail
salaire_tele_par_pays = df_teletravail.groupby(["employee_residence", "remote_work"])["salary_in_usd"].mean().reset_index()

# Affichage du graphique
fig = px.bar(salaire_tele_par_pays, 
             x="employee_residence", 
             y="salary_in_usd", 
             color="remote_work", 
             title="Impact du tÃ©lÃ©travail sur le salaire selon le pays",
             labels={"employee_residence": "Pays", "salary_in_usd": "Salaire moyen (USD)", "remote_work": "Type de travail"},
             barmode="group")

# Afficher le graphique avec Streamlit
st.plotly_chart(fig)

### 10. Filtrage avancÃ© des donnÃ©es avec deux st.multiselect, un qui indique "SÃ©lectionnez le niveau d'expÃ©rience" et l'autre "SÃ©lectionnez la taille d'entreprise"
#votre code 
st.subheader("ðŸ“Š Filtrage avancÃ© des donnÃ©e")

experience_options = df["experience_level"].unique().tolist()
company_size_options = df["company_size"].unique().tolist()

# CrÃ©ation des widgets pour filtrer
selected_experience = st.multiselect("SÃ©lectionnez le niveau d'expÃ©rience", experience_options, default=experience_options)
selected_company_size = st.multiselect("SÃ©lectionnez la taille d'entreprise", company_size_options, default=company_size_options)

# Filtrage des donnÃ©es puis affichage
filtered_df = df[(df["experience_level"].isin(selected_experience)) & 
                 (df["company_size"].isin(selected_company_size))]

st.dataframe(filtered_df)
